import asyncio
import logging
import json
import requests
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from ai_api import process_image

# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ bot.log
logging.basicConfig(
    filename='bot.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# üîπ –ö–æ–Ω—Ñ–∏–≥-–º–µ–Ω–µ–¥–∂–µ—Ä
class ConfigHandler:
    CONFIG_PATH = "config.json"

    @classmethod
    def load(cls):
        with open(cls.CONFIG_PATH, "r") as file:
            return json.load(file)

    @classmethod
    def save(cls, config):
        with open(cls.CONFIG_PATH, "w") as file:
            json.dump(config, file, indent=4)
        logging.info("‚úÖ chat_id —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ config.json!")

config = ConfigHandler.load()
bot = Bot(token=config["telegram"]["bot_token"])
dp = Dispatcher()

# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async def process_received_file(file_id, chat_id):
    try:
        file_info = await bot.get_file(file_id)
        file_url = f"https://api.telegram.org/file/bot{config['telegram']['bot_token']}/{file_info.file_path}"
        logging.info(f"üåê –ó–∞–≥—Ä—É–∂–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {file_url}")

        with requests.Session() as session:
            img_data = session.get(file_url).content

        with open("received.png", "wb") as handler:
            handler.write(img_data)
        logging.info("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ.")

        await bot.send_message(chat_id, "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —á–µ—Ä–µ–∑ –ò–ò...")
        response = await process_image("received.png")
        await bot.send_message(chat_id, f"ü§ñ –û—Ç–≤–µ—Ç –ò–ò:\n{response}")
        logging.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ /start
@dp.message(F.text == "/start")
async def handle_start(message: Message):
    chat_id = message.chat.id
    if config["telegram"].get("chat_id") != chat_id:
        config["telegram"]["chat_id"] = chat_id
        ConfigHandler.save(config)
        logging.info(f"‚úÖ chat_id {chat_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏ —è –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—é.")

# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞
@dp.message(F.photo | F.document)
async def handle_media(message: Message):
    chat_id = message.chat.id
    file_id = message.photo[-1].file_id if message.photo else message.document.file_id
    logging.info(f"üìù –ü–æ–ª—É—á–µ–Ω file_id: {file_id}")
    await process_received_file(file_id, chat_id)

# üîπ –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
