import os
import json
import subprocess
from datetime import datetime
import requests
from ai_api import process_image  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
import asyncio

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
with open("config.json", "r") as f:
    config = json.load(f)

TOKEN = config["telegram"]["bot_token"]
CHAT_ID = config["telegram"]["chat_id"]
PHOTO_URL = f"https://api.telegram.org/bot{TOKEN}/sendPhoto"
SESSION_DIR = "session_temp"
os.makedirs(SESSION_DIR, exist_ok=True)


async def take_screenshot():
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    screenshot_path = os.path.join(SESSION_DIR, f"screenshot_{timestamp}.png")
    subprocess.run(f"gnome-screenshot -f {screenshot_path}", shell=True)
    return screenshot_path if os.path.exists(screenshot_path) else None


async def process_and_send(screenshot):
    print(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–¥–µ–ª–∞–Ω: {screenshot}")
    print("üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ OpenAI...")

    # ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ —á–µ—Ä–µ–∑ –ò–ò
    result = await process_image(screenshot)
    print(f"ü§ñ –û—Ç–≤–µ—Ç –ò–ò: {result}")

    # ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
    with open(screenshot, "rb") as img:
        response = requests.post(
            PHOTO_URL,
            data={"chat_id": CHAT_ID, "caption": f"ü§ñ –û—Ç–≤–µ—Ç –ò–ò:\n{result}"},
            files={"photo": img},
        )
    if response.status_code == 200:
        print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram.")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {response.text}")

    # ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω–∞
    os.remove(screenshot)
    print(f"üóëÔ∏è –°–∫—Ä–∏–Ω—à–æ—Ç {screenshot} —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.")


async def main():
    """üöÄ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∫—Ä–∏–Ω–æ–≤ –¥–æ –Ω–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞."""
    print(
        f"üöÄ –°–µ—Å—Å–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—á–∞–ª–∞—Å—å. –û–∂–∏–¥–∞–µ–º –≥–æ—Ä—è—á—É—é –∫–ª–∞–≤–∏—à—É {config['screenshot']['hotkey']}..."
    )
    from pynput import keyboard

    pressed_keys = set()
    HOTKEY = config["screenshot"]["hotkey"].lower().split("+")

    def on_press(key):
        try:
            key_str = (
                key.char.lower()
                if hasattr(key, "char") and key.char
                else str(key).split(".")[-1].lower()
            )
            pressed_keys.add(key_str)
            if set(HOTKEY).issubset(pressed_keys):
                print("üì∏ –ì–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞ –Ω–∞–∂–∞—Ç–∞! –û–±—Ä–∞–±–æ—Ç–∫–∞...")
                screenshot = asyncio.run(take_screenshot())
                asyncio.run(process_and_send(screenshot))
                pressed_keys.clear()
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞: {e}")

    def on_release(key):
        key_str = (
            key.char.lower()
            if hasattr(key, "char") and key.char
            else str(key).split(".")[-1].lower()
        )
        pressed_keys.discard(key_str)

    with keyboard.Listener(on_press=on_press, on_release=on_release) as listener:
        listener.join()


if __name__ == "__main__":
    # ‚úÖ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—à–ª–æ–π —Å–µ—Å—Å–∏–∏
    for file in os.listdir(SESSION_DIR):
        os.remove(os.path.join(SESSION_DIR, file))
    print(f"üßπ –ü–∞–ø–∫–∞ {SESSION_DIR} –æ—á–∏—â–µ–Ω–∞ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏.")
    asyncio.run(main())
