import asyncio
import logging
import requests
import atexit
import subprocess
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from src.ai_api import process_image
from src.config_handler import ConfigHandler

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞ 1 —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
ConfigHandler.update_language()


# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫
def translate(text):
    return ConfigHandler.translate(text)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=ConfigHandler.get_value("telegram.bot_token"))
dp = Dispatcher()


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
screenshot_process = None


# –ó–∞–ø—É—Å–∫ screenshot_sender.py
async def start_screenshot_sender():
    global screenshot_process
    screenshot_process = subprocess.Popen(
        ["python3", "-m", "src.screenshot_sender"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )


# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ screenshot_sender.py –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
def stop_screenshot_sender():
    global screenshot_process
    if screenshot_process and screenshot_process.poll() is None:
        logging.info(translate("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ screenshot_sender.py..."))
        screenshot_process.terminate()
        screenshot_process.wait()
        logging.info(translate("screenshot_sender.py —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."))


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞
atexit.register(stop_screenshot_sender)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
@dp.message(Command("start"))
async def handle_start(message: types.Message):
    chat_id = message.chat.id
    saved_chat_id = ConfigHandler.get_value("telegram.chat_id", 0)

    if saved_chat_id in [None, 0]:
        await message.answer(translate("üîî –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω."))
        return

    await message.answer(
        translate("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏ —è –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—é.")
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
async def process_received_file(file_id, chat_id):
    try:
        file_info = await bot.get_file(file_id)
        file_url = f"https://api.telegram.org/file/bot{ConfigHandler.get_value('telegram.bot_token')}/{file_info.file_path}"

        with requests.Session() as session:
            img_data = session.get(file_url).content

        received_image_path = "logs/received.png"
        with open(received_image_path, "wb") as handler:
            handler.write(img_data)
        logging.info(f"{translate('–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω:')} {received_image_path}")

        await bot.send_message(
            chat_id, translate("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —á–µ—Ä–µ–∑ –ò–ò...")
        )
        response = await process_image(received_image_path)
        await bot.send_message(chat_id, response)
        logging.info(translate("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."))
    except Exception as e:
        logging.error(f"{translate('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:')} {e}")
        await bot.send_message(chat_id, translate(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}"))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞
@dp.message(lambda message: message.photo or message.document)
async def handle_media(message: types.Message):
    chat_id = message.chat.id
    file_id = message.photo[-1].file_id if message.photo else message.document.file_id
    await process_received_file(file_id, chat_id)


# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await start_screenshot_sender()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
