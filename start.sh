#!/bin/bash

CONFIG_FILE="config/config.json"
LANG_FILE="config/lang.json"
LOG_FILE="logs/bot.log"

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
pkill -9 -f "python3 -m src.bot"
pkill -9 -f "python3 -m src.screenshot_sender"
sleep 2

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è config.json
update_config() {
    jq "$1" "$CONFIG_FILE" > tmp.json && mv tmp.json "$CONFIG_FILE"
    sync
}

# –ó–∞–ø—Ä–æ—Å —è–∑—ã–∫–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–¥–∞–Ω –≤ config.json
LANG_SETTING=$(jq -r '.language' "$CONFIG_FILE")
while [[ "$LANG_SETTING" == "null" || -z "$LANG_SETTING" ]]; do
    echo "Select language: en, ru, de"
    read -r LANG_INPUT
    case "$LANG_INPUT" in
        en|ru|de)
            update_config ".language = \"$LANG_INPUT\""
            LANG_SETTING="$LANG_INPUT"
            ;;
    esac
done

# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫
translate() {
    local text="$1"
    jq -r --arg lang "$LANG_SETTING" --arg txt "$text" '.[$lang][$txt] // $txt' "$LANG_FILE"
}

echo "$(translate "üöÄ –°—Ç–∞—Ä—Ç—É–µ–º!")"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Python3
echo "$(translate "üîé –ß–µ–∫–∞—é –µ—Å—Ç—å –ª–∏ Python3...")"
if ! command -v python3 &> /dev/null; then
    echo "$(translate "‚ùå Python3 –≥–¥–µ? –°—Ç–∞–≤—å –ø–æ-–±—ã—Å—Ç—Ä–æ–º—É –∏ –±—É–¥–µ—Ç —á–µ—Ç–∫–æ (sudo apt install python3).")"
    exit 1
fi
echo "$(translate "‚úÖ Python3 –Ω–∞–π–¥–µ–Ω!")"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è config.json
if [ ! -f "$CONFIG_FILE" ]; then
    echo "$(translate "‚ùå –§–µ–π–ª ‚Äî config.json –∫—É–¥–∞-—Ç–æ —Å–ª–∏–ª—Å—è!")"
    exit 1
fi

# –í–≤–æ–¥ bot_token
BOT_TOKEN=$(jq -r '.telegram.bot_token' "$CONFIG_FILE")
BOT_TOKEN_WAS_SET=false

while [[ "$BOT_TOKEN" == "null" || -z "$BOT_TOKEN" || ! "$BOT_TOKEN" =~ ^[0-9]+:[A-Za-z0-9_-]{35,}$ ]]; do
    echo "$(translate "üîî –ô–æ! Telegram Bot API token –Ω–µ –Ω–∞–π–¥–µ–Ω! –ó–∞–±–µ—Ä–∏ –≤ @BotFather –∏ –≤–±–∏–≤–∞–π —Å—é–¥–∞:")"
    read -r TOKEN_INPUT
    if [[ "$TOKEN_INPUT" =~ ^[0-9]+:[A-Za-z0-9_-]{35,}$ ]]; then
        update_config ".telegram.bot_token = \"$TOKEN_INPUT\""
        echo "$(translate "‚úÖ Telegram Bot API token –∫—Ä–∞—Å–∏–≤–æ –∑–∞–ª–µ—Ç–µ–ª –≤ config.json!")"
        BOT_TOKEN="$TOKEN_INPUT"
        BOT_TOKEN_WAS_SET=true
    fi
done

if [ "$BOT_TOKEN_WAS_SET" = false ]; then
    echo "$(translate "‚úÖ Telegram Bot API token –Ω–∞–π–¥–µ–Ω!")"
fi

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ chat_id
CHAT_ID=$(jq -r '.telegram.chat_id' "$CONFIG_FILE")

if [[ "$CHAT_ID" == "null" || "$CHAT_ID" == "0" || -z "$CHAT_ID" ]]; then
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ chat_id –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    echo "$(translate "üîî –û—á–∏—â–∞—é –∏—Å—Ç–æ—Ä–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Telegram...")"
    LATEST_UPDATE_ID=$(curl -s "https://api.telegram.org/bot$BOT_TOKEN/getUpdates" | jq '.result | map(.update_id) | max // empty')
    if [[ "$LATEST_UPDATE_ID" != "null" && -n "$LATEST_UPDATE_ID" ]]; then
        NEXT_OFFSET=$((LATEST_UPDATE_ID + 1))
        curl -s "https://api.telegram.org/bot$BOT_TOKEN/getUpdates?offset=$NEXT_OFFSET" > /dev/null
    fi

    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    echo "$(translate "üîî –ù–∞–ø–∏—à–∏ /start –≤ Telegram –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è —Å—é–¥–∞!")"

    for i in {1..20}; do  # –ñ–¥–µ–º 100 —Å–µ–∫—É–Ω–¥ (–ø–æ 5 —Å–µ–∫—É–Ω–¥)
        UPDATES=$(curl -s "https://api.telegram.org/bot$BOT_TOKEN/getUpdates?offset=-1")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if [[ $(echo "$UPDATES" | jq '.result | length') -eq 0 ]]; then
            sleep 5
            continue
        fi

        # –ò–∑–≤–ª–µ–∫–∞–µ–º chat_id
        CHAT_ID=$(echo "$UPDATES" | jq -r '.result | map(select(.message.chat.id != null)) | last | .message.chat.id')

        if [[ "$CHAT_ID" != "null" && "$CHAT_ID" != "0" && -n "$CHAT_ID" ]]; then
            update_config ".telegram.chat_id = $CHAT_ID"
            echo "$(translate "‚úÖ Chat ID –æ–ø—Ä–µ–¥–µ–ª–µ–Ω:") $CHAT_ID. $(translate "–ò –∑–∞–ø–∏—Å–∞–Ω –≤ config.json!")"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
            curl -s -X POST "https://api.telegram.org/bot$BOT_TOKEN/sendMessage" \
                 -d "chat_id=$CHAT_ID" -d "text=üîî Chat ID –æ–ø—Ä–µ–¥–µ–ª–µ–Ω! –ü–µ—Ä–µ–π–¥–∏ —Å–Ω–æ–≤–∞ –≤ –±–æ—Ç–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏." > /dev/null

            break
        fi

        sleep 5
    done

    if [[ -z "$CHAT_ID" || "$CHAT_ID" == "null" || "$CHAT_ID" == "0" ]]; then
        echo "$(translate "‚ùå –û—à–∏–±–∫–∞: chat_id –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")"
        exit 1
    fi
else
    echo "$(translate "‚úÖ Chat ID –Ω–∞–π–¥–µ–Ω!")"
fi

# –ó–∞–ø—Ä–æ—Å AI API-–∫–ª—é—á–∞
API_KEY=$(jq -r '.openai.api_key' "$CONFIG_FILE")
while [[ "$API_KEY" == "null" || -z "$API_KEY" || ! "$API_KEY" =~ ^sk-[A-Za-z0-9_-]{30,}$ ]]; do
    echo "$(translate "üîî –ô–æ! –ü–æ–¥–∫–∏–Ω—å API key –æ—Ç –ò–ò —Å—é–¥–∞, –ø–ª–∏–∑:")"
    read -r KEY_INPUT
    if [[ "$KEY_INPUT" =~ ^sk-[A-Za-z0-9_-]{30,}$ ]]; then
        update_config ".openai.api_key = \"$KEY_INPUT\""
        echo "$(translate "‚úÖ API key –ø–æ –∫–∞–π—Ñ—É –≤–ª–µ—Ç–µ–ª –≤ config.json!")"
        API_KEY="$KEY_INPUT"
    fi
done

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –û–°
OS_SETTING=$(jq -r '.screenshot.os' "$CONFIG_FILE")

if [[ "$OS_SETTING" == "auto" || "$OS_SETTING" == "null" || -z "$OS_SETTING" ]]; then
    UNAME_OUT="$(uname -s)"
    case "${UNAME_OUT}" in
        Linux*)     OS_TYPE="ubuntu";;
        Darwin*)    OS_TYPE="macos";;
        CYGWIN*|MINGW*) OS_TYPE="windows";;
        *)          OS_TYPE="unknown"
    esac
    update_config ".screenshot.os = \"$OS_TYPE\""
    echo "$(translate "üíΩ –û–° —Å–ø–∞–ª–µ–Ω–∞:") $OS_TYPE"
else
    echo "$(translate "‚úÖ –û–° –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞!")"
    OS_TYPE="$OS_SETTING"
fi

if [[ "$OS_TYPE" == "unknown" ]]; then
    echo "$(translate "‚ùå –û—à–∏–±–∫–∞: –ß—ë—Ç –Ω–µ–ø–æ–Ω—è—Ç–Ω–∞—è –û–°. –ü–æ–¥–∫–∏–Ω—å –ø–∞—Ä–∞–º–µ—Ç—Ä 'os' –≤ config.json.")"
    exit 1
fi

# –°–∫—Ä—ã—Ç—ã–π —Å–±—Ä–æ—Å
UNSET_CMD=$(jq -r ".screenshot.commands.$OS_TYPE.unset" "$CONFIG_FILE")
if [[ "$UNSET_CMD" != "null" && -n "$UNSET_CMD" ]]; then
    eval "$UNSET_CMD" &> /dev/null
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç-—É—Ç–∏–ª–∏—Ç—ã
CHECK_CMD=$(jq -r ".screenshot.commands.$OS_TYPE.check" "$CONFIG_FILE")
INSTALL_CMD=$(jq -r ".screenshot.commands.$OS_TYPE.install" "$CONFIG_FILE")

if ! eval "$CHECK_CMD" &> /dev/null; then
    echo "$(translate "üíæ –£—Ç–∏–ª—É –¥–ª—è —Å–∫—Ä–∏–Ω–æ–≤ –Ω–µ –Ω–∞—à–µ–ª ‚Äî —â–∞ –∑–∞–∫–∏–Ω—É –ø–æ-–±—ã—Å—Ç—Ä–æ–º—É...")"
    eval "$INSTALL_CMD"
    echo "$(translate "‚úÖ –£—Ç–∏–ª–∞ –∑–∞—Å–µ—Ç–∞–ø–µ–Ω–∞!")"
else
    echo "$(translate "‚úÖ –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–∫—Ä–∏–Ω–æ–≤ —É–∂–µ –∑–∞—Å–µ—Ç–∞–ø–µ–Ω–∞!")"
fi

# –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
if [ ! -d "venv" ]; then
    echo "$(translate "üíæ –°–æ–∑–¥–∞—é –≤–∏—Ä—Ç—É–∞–ª–æ—á–∫—É...")"
    python3 -m venv venv
    echo "$(translate "‚úÖ –í–∏—Ä—Ç—É–∞–ª–æ—á–∫–∞ –ø–æ–¥–Ω—è—Ç–∞!")"
fi
source venv/bin/activate

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
if [ ! -f "venv/installed.lock" ] || [ requirements.txt -nt venv/installed.lock ]; then
    echo "$(translate "üíæ –ó–∞–∫–∏–¥—ã–≤–∞—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")"
    pip install --upgrade pip
    pip install -r requirements.txt
    touch venv/installed.lock
    echo "$(translate "‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–æ–¥—ä–µ—Ö–∞–ª–∏!")"
fi

# –ó–∞–ø—É—Å–∫ bot.py
nohup python3 -m src.bot > "$LOG_FILE" 2>&1 &
HOTKEY=$(jq -r '.screenshot.hotkey' "$CONFIG_FILE")
echo "$(translate "‚úÖ –í—Å–µ —á–µ—Ç–∫–æ! –ñ–º–∏") ${HOTKEY} $(translate "–∏ —Å–∫—Ä–∏–Ω –ª–µ—Ç–∏—Ç –≤ –¢–µ–ª–µ–≥—É.")"
